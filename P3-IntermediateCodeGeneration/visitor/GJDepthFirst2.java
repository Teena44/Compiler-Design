//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst2<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
  public HashMap < String, ClassObj> symTab = new HashMap<String,ClassObj>();

  public HashMap < String, Table> tacTable = new HashMap<String,Table>();

  public int counter ;

  public int label = 0;

  public String class_name = null;

  public String method_name = null;

  public boolean main_class;

  public boolean method_decl;

  public String state="";

  public Vector vec = new Vector();

  public String class_type = null;

  public String arr_name;

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;

      Ret_Obj obj = (Ret_Obj) argu; 
      symTab = obj.symboltable;
      tacTable = obj.offsetTable;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      System.out.println("MAIN\n");
      main_class = true;
      counter = 200;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      _ret = n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      //System.out.println(_ret.toString());
      main_class = false;
      System.out.println("END\n");
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      class_name = n.f1.f0.toString();

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(method_decl)
      {
        HashMap<String,Integer> temp_storage = new HashMap<String,Integer>();
        temp_storage = (HashMap<String,Integer>) argu;
        temp_storage.put(n.f1.f0.toString(),counter++);
        return (R) temp_storage;
      }
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      method_name = n.f2.f0.toString();
      System.out.println(class_name+"_"+n.f2.f0.toString()+" ["+(symTab.get(class_name).methods.get(n.f2.f0.toString()).paramList.size()+1)+"]");
      System.out.println("BEGIN");
      counter  = 1;

      HashMap<String, Integer> temp_storage = new HashMap<String,Integer>();
      n.f3.accept(this, argu);
      n.f4.accept(this, (A) temp_storage);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);

      method_decl = true;

       n.f7.accept(this, (A) temp_storage);
      String s;
      s = (String) n.f8.accept(this, (A) temp_storage);

      n.f9.accept(this, argu);
      R r10 = n.f10.accept(this, (A) temp_storage);

      System.out.println("\nRETURN "+r10.toString()+"\n");
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);

      method_decl = false;
      System.out.println("END\n");
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      HashMap<String,Integer> temp_storage = new HashMap<String,Integer>();
      temp_storage = (HashMap<String,Integer>) argu;
      temp_storage.put(n.f1.f0.toString(),counter);
      counter++;
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      //System.out.println("i am in statement");
      _ret = n.f0.accept(this, argu);
      //System.out.println("look "+_ret.toString());
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      //System.out.println("i am in block");
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      R remain;
      //System.out.println("i am in assignment statement");
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      remain = n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      HashMap<String,Integer> temp_storage = new HashMap<String,Integer>();
      temp_storage = (HashMap<String,Integer>) argu;
      String s = "";

      if(temp_storage.containsKey(n.f0.f0.toString()))
      {
        for(String key : temp_storage.keySet())
        {
          if(key == n.f0.f0.toString())
          {
            // if(remain==null)
            //   System.exit(0);
            s = "MOVE TEMP "+temp_storage.get(key)+" "+remain.toString()+" ";
            System.out.println(s);
            return (R) s;
          }

        }
      }
      else
      {
        s = "HSTORE TEMP 0 " + tacTable.get(class_name).vars.get(n.f0.f0.toString())+" "+remain.toString()+" ";
        System.out.println(s);
        return (R) s;
      }
      //System.out.println(s);
      return (R) s;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      int offset = 4; 
      R r0 = n.f0.accept(this, argu);

      HashMap<String,Integer> temp_storage = new HashMap<String,Integer>();
      temp_storage = (HashMap<String,Integer>) argu;

      if(temp_storage.containsKey(n.f0.f0.toString()))
        offset = temp_storage.get(n.f0.f0.toString());
      else if(tacTable.get(class_name).vars.containsKey(n.f0.f0.toString()))
        offset = tacTable.get(class_name).vars.get(n.f0.f0.toString());

      System.out.println("HSTORE PLUS");
      System.out.println("BEGIN");
      System.out.println("MOVE TEMP "+(counter++)+" TIMES 1 "+offset);
      System.out.println("HLOAD TEMP "+(counter++)+" PLUS TEMP 0 TEMP "+(counter-2)+" 0");
      System.out.println("RETURN TEMP "+(counter-1));
      System.out.println("END");
      System.out.println("PLUS");
      System.out.println("BEGIN");

      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      System.out.println("MOVE TEMP "+(counter++)+" TIMES "+r2.toString()+" 4");
        System.out.println("HLOAD TEMP "+(counter++));
        System.out.println("BEGIN");
        System.out.println("MOVE TEMP "+(counter-4)+" TIMES 1 "+offset);
        System.out.println("HLOAD TEMP "+(counter-3)+" PLUS TEMP 0 TEMP "+(counter-4)+ " 0");
        System.out.println("RETURN TEMP "+(counter -3));
        System.out.println("END");
        System.out.println("0");
        System.out.println("  CJUMP MINUS 1 LE TEMP "+(counter-2)+" MINUS TEMP "+(counter-1)+" 1 L"+(label++));
        System.out.println("ERROR");
        System.out.println("L"+(label-1)+"   NOOP");
        System.out.println("RETURN TEMP "+(counter-2));
        System.out.println("END ");
        System.out.println("4 0 ");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      R r5 = n.f5.accept(this, argu);
      System.out.println(r5.toString());
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      //System.out.println(_ret.toString());
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);

      String s = "\n";
      s = s+" CJUMP "+r2.toString()+" L"+label;
      label++;
      int l = label;
      System.out.println(s);

      n.f3.accept(this, argu);
      System.out.println("\n");
      R r4 = n.f4.accept(this, argu);
      System.out.println("\n");
      
      s = "\n L"+(l-1);
      s = s + "\nNOOP\n";
      System.out.println(s);
      return (R)s;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      String s = "\n";
      s = s+" CJUMP "+r2.toString()+" L"+(label++);
      int l = label;
      System.out.println(s);

      n.f3.accept(this, argu);
      R r4 = n.f4.accept(this, argu);

      s = "\nJUMP L"+(label++)+"\n";
      System.out.println(s);
      int l2 = label;

      n.f5.accept(this, argu);
      s = " L"+(l-1)+"\n";
      System.out.println(s);
      R r6 =  n.f6.accept(this, argu);
   
      s ="\nL"+(l2-1)+"\n"+"NOOP\n";
      System.out.println(s);
      counter++;
      // label++;
      return (R) s;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      
      String s = "L"+(label++)+" CJUMP "+r2.toString()+" L"+(label++)+"\n";
      int l = label;
      System.out.println(s);

      R r4 = n.f4.accept(this, argu);

      s = "\nJUMP L"+(l-2)+"\n";
      s = s+"L"+(l-1)+"\n";
      s = s+"NOOP\n";

      System.out.println(s);
      return (R) s;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String s = "PRINT ";
      s = s+r2.toString();
      System.out.println(s);
      return (R) s;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      String s = "BEGIN\nCJUMP "+r0.toString()+" L"+label;
      s = s+"\n"+"CJUMP "+r2.toString()+" L"+label;
      s = s+"\n MOVE TEMP "+counter+" 1\n" ;
      s = s+"JUMP L"+(label+1)+"\n";
      s = s+"\n L"+label+"\n";
      s = s + "MOVE TEMP "+counter+" 0\n\n";
      s =s+"L"+(label+1)+"\n";
      s =s +"NOOP\nRETURN TEMP "+counter+"\nEND\n";
      label = label+2;
      counter++;
      return (R) s;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);

      String s = "BEGIN\nCJUMP "+r0.toString()+" L"+label+"\n";
      s = s+"MOVE TEMP "+counter+" 1\n";
      s =s+"JUMP L"+(label+1)+"\n";
      s =s +"L"+label+"\n";
      s = s+"CJUMP "+r2.toString()+" L"+(label+2)+"\n";
      s = s+"MOVE TEMP "+counter+" 1\n";
      s = s+"JUMP L"+(label+1)+"\n";
      s =s + "L"+(label+2)+"\n";
      s =s+"MOVE TEMP "+counter+" 0\n";
      s =s+"L"+(label+1)+"\n";
      s =s +"NOOP\nRETURN TEMP "+counter+"\nEND\n";
      label=label+3;
      counter++;
      return (R) s;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      String s = "LE "+r0+" "+r2;
      return (R) s;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      String s = "NE "+r0+" "+r2;
      return (R) s;

   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String s;
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      s = " PLUS "+r0.toString()+" "+r2.toString();
      return (R) s;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String s;
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      s = " MINUS "+r0.toString()+" "+r2.toString();
      return (R) s;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String s;
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      s = " TIMES "+r0.toString()+" "+r2.toString();
      return (R) s;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      String s;
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      s = " DIV "+r0.toString()+" "+r2.toString();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;

      HashMap<String,Integer> temp_storage = new HashMap<String,Integer>();
      temp_storage = (HashMap<String,Integer>) argu;

      int offset = 0;
      R r0 = n.f0.accept(this, argu);
      if(temp_storage.containsKey(arr_name))
        offset = temp_storage.get(arr_name);
      else if(tacTable.get(class_name).vars.containsKey(arr_name)){
        offset = tacTable.get(class_name).vars.get(arr_name);
      }

      
      String s = "\nBEGIN\n"+"HLOAD TEMP "+(counter++)+" PLUS\n";
      s = s+"BEGIN\n"+"HLOAD TEMP "+(counter++)+" TEMP 0 "+offset+"\n";
      s = s+"RETURN TEMP "+(counter-1)+"\n";
      s = s+"END\n";
      s = s+"PLUS\n";
      s = s+"BEGIN\n";
      int c = counter;
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      s = s +"MOVE TEMP "+(counter++)+" TIMES "+r2.toString()+" 4\n";
      s = s+"HLOAD TEMP "+(counter++)+"\n";
      s = s+"BEGIN\nHLOAD TEMP "+(c-1)+" TEMP 0 "+offset+"\n";
      s = s+"RETURN TEMP "+(c-1)+"\n";
      s = s+"END\n"+"0\n";
      s = s+"CJUMP MINUS 1 LE TEMP "+(counter-2)+" MINUS TEMP "+(counter-1)+" 1 L"+(label++)+"\n";
      s = s+"ERROR\n";
      s = s+"L"+(label-1)+"   NOOP\n";
      s = s+"RETURN TEMP "+(counter-2)+"\n";
      s = s+"END\n4 0\n";
      s = s+"RETURN TEMP "+(c-2)+"\nEND\n";
      n.f3.accept(this, argu);
      return (R) s;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      String offset="" ;
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      // if(method_decl){
        offset = tacTable.get(class_type).methods.get(n.f2.f0.toString()).toString();
        // System.out.println(class_type);
        // for(String key : tacTable.get(class_type).methods.keySet())
        // {
        //   System.out.println(key+" "+tacTable.get(class_type).methods.get(key));
        // }
        // System.exit(0);
      // }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);

      if(method_decl)
      {
        String s = "CALL\n";
        s = s+"BEGIN\n";
        s = s+"MOVE TEMP "+(counter)+" TEMP 0\n";
        s = s+"HLOAD TEMP "+(counter+1)+" TEMP "+counter+" 0\n";
        s = s+"HLOAD TEMP "+(counter+2)+" TEMP "+(counter+1)+" "+offset+"\n";
        s = s+"RETURN TEMP "+(counter+2)+"\n";
        s = s+"END\n";
        s = s+"( TEMP "+counter+" ";
        int i;
        for(i=0;i<vec.size();i++)
        {
          s = s+vec.get(i)+" ";
        }
        s = s+")\n";
        counter = counter+3;
        vec.clear();
        return (R) s;
      }
      if(main_class)
      {
        String s = "CALL\n";
        s = s+"BEGIN\n";
        int c = counter;
        s = s+"MOVE TEMP "+(counter)+"\n"+r0.toString()+"\n";
        s = s+"HLOAD TEMP "+(counter+1)+" TEMP "+c+" 0\n";
        s = s+"HLOAD TEMP "+(counter+2)+" TEMP "+(counter+1)+" "+offset+"\n";
        s = s+"RETURN TEMP "+(counter+2)+"\n";
        s = s+"END\n";
        s = s+"( TEMP "+c+" ";
        int i;
        for(i=0;i<vec.size();i++)
        {
          s = s+vec.get(i)+" ";
        }
        s = s+")\n";
        counter = counter+3;
        vec.clear();
        return (R) s;
      }
      vec.clear();
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      vec.add(r0.toString());
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R r1 = n.f1.accept(this, argu);
      vec.add(r1.toString());
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return (R) n.f0.toString();
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s = "1";
      return (R) s;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s = "0";
      return (R) s;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      String s = "";
      R r0 = n.f0.accept(this, argu);
      arr_name = n.f0.toString();
      if(method_decl)
      {
        HashMap<String,Integer> temp_storage = new HashMap<String,Integer>();
        temp_storage = (HashMap<String,Integer>) argu;

        if(temp_storage.containsKey(n.f0.toString()))
        {
          s = "TEMP "+temp_storage.get(n.f0.toString()).toString()+" "; 
          class_type = symTab.get(class_name).methods.get(method_name).variables.get(n.f0.toString());
          if(!symTab.get(class_name).methods.get(method_name).variables.containsKey(n.f0.toString()))
          {
            class_type = symTab.get(class_name).methods.get(method_name).paramList.get(n.f0.toString());
          }
          return (R) s;
        }
        else if(tacTable.get(class_name).vars.containsKey(n.f0.toString()))
        {
          s = "\nBEGIN \n"+"HLOAD TEMP "+counter+" TEMP 0 " + tacTable.get(class_name).vars.get(n.f0.toString())+" ";
          s = s+"\n RETURN TEMP "+counter+"\n END";
          counter++;
          return (R) s;
        }
        else if(tacTable.get(class_name).methods.containsKey(n.f0.toString()))
        {
          String offset = tacTable.get(class_name).methods.get(n.f0.toString()).toString();
          return (R) offset;
        }
      }
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      class_type = class_name;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      R r3 = n.f3.accept(this, argu);

      String s = "\nBEGIN \nMOVE TEMP "+(counter++)+" HALLOCATE TIMES PLUS "+r3.toString()+" 1 4\n";
      s = s+"MOVE TEMP "+(counter++)+" 4\n";
      s = s+"L"+(label++)+"  CJUMP LE TEMP "+(counter-1)+" MINUS TIMES PLUS "+r3.toString()+" 1 4 1 L"+(label++)+"\n";
      s = s+"  HSTORE PLUS TEMP "+(counter-2)+" "+(counter-1)+" 0 0\n";
      s = s+"  MOVE TEMP "+(counter-1)+" PLUS TEMP "+(counter-1)+" 4\n";
      s = s+"  JUMP L"+(label-2)+"\n";
      s = s+"L"+(label-1)+"  HSTORE TEMP "+(counter-2)+" 0 TIMES "+r3.toString()+" 4\n";
      s = s+" RETURN TEMP "+(counter-2)+"\n";
      s = s+"END\n";
      n.f4.accept(this, argu);
      return (R) s;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      class_type = n.f1.f0.toString();
      String s = "BEGIN\n";
      s = s+"MOVE TEMP "+(counter++)+" HALLOCATE "+(symTab.get(n.f1.f0.toString()).methods.size()*4)+"\n";
      s = s+"MOVE TEMP "+(counter++)+" HALLOCATE "+((symTab.get(n.f1.f0.toString()).global_vars.size()+1)*4)+"\n";
      int i=0;
      if(symTab.get(n.f1.f0.toString()).methods.size()!=0)
      {
        for(String key : tacTable.get(n.f1.f0.toString()).methods.keySet())
        {
          s = s + "HSTORE TEMP "+(counter-2)+" "+tacTable.get(n.f1.f0.toString()).methods.get(key)+" "+n.f1.f0.toString()+"_"+key+"\n";
         // i++;
        }
      }
      if(symTab.get(n.f1.f0.toString()).global_vars.size()==0)
      {
        s =s+"HSTORE TEMP "+(counter-1)+" 0"+" TEMP "+(counter-2)+"\n";
        s =s+"RETURN TEMP "+(counter-1)+"\n";
        s =s+"END\n";
      }
      else
      {
        s= s+"MOVE TEMP "+(counter++)+" 4\n";
        s = s+" L"+(label++)+" CJUMP LE TEMP "+(counter-1)+" "+((symTab.get(n.f1.f0.toString()).global_vars.size()+1)*4-1)+" L"+(label++)+"\n";
        s = s+"  HSTORE PLUS TEMP "+(counter-2)+" TEMP "+(counter-1)+" 0 0\n";
        s = s+"  MOVE TEMP "+(counter-1)+" PLUS TEMP "+(counter-1)+" 4\n";
        s = s+"  JUMP L"+(label-2)+"\n";
        s = s+"L"+(label-1)+" HSTORE TEMP "+(counter-2)+" 0 TEMP "+(counter-3)+"\n";
        s = s+" RETURN TEMP "+(counter-2)+"\n";
        s = s+"END\n";
      }
      
      return (R) s;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R r1 = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
