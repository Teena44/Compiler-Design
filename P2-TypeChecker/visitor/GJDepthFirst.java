//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
class MethodObj{
      public String returnType;
      public HashMap< String, String> paramList;
      public HashMap< String, String> variables;
   }

class ClassExtendsObj{
      public HashMap< String, String> global_vars;
      public HashMap < String, MethodObj> methods; 
   } 

class ClassObj{
      public HashMap< String, String> global_vars;
      public HashMap< String, MethodObj> methods;
      public HashMap< String, ClassExtendsObj> class_extends; 
   }
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
  // public class MethodObj{
  //     public String returnType;
  //     public HashMap< String, String> paramList;
  //     public HashMap< String, String> variables;
  //  }

  //  public class ClassExtendsObj{
  //     public HashMap< String, String> global_vars;
  //     public HashMap < String, MethodObj> methods; 
  //  } 

  //  public class ClassObj{
  //     public HashMap< String, String> global_vars;
  //     public HashMap< String, MethodObj> methods;
  //     public HashMap< String, ClassExtendsObj> class_extends; 
  //  }

   public HashMap<String, ClassObj> SymTab = new HashMap<String, ClassObj>(); //symbol table declaration
   public String class_name = null;
   public String class_extends_name = null;
   public String method_name = null;
   public boolean main_identifier = false;
   public Vector vec = new Vector();
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret = (R) SymTab;
      // for(String name: SymTab.keySet()){
      //   String key = name;
      //   System.out.println(name);
      // }
      // if(SymTab.get("Fac").global_vars==null)
      // {
      //   System.out.println("not there");
      //   System.exit(0);
      // }
      // if(SymTab.get("Fac").methods!=null)
      // {
      //   for(String name: SymTab.get("Fac").methods.keySet()){
      //   String key = name;
      //   System.out.println(name);
      //   }
      // }
      // else
      // {
      //   System.out.println("oops");
      // }
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      main_identifier = true;
      n.f0.accept(this, argu);
      R r1 = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      R r11 = n.f11.accept(this, argu);
      main_identifier = false;
      ClassObj class_info = new ClassObj();
      class_info.global_vars = new HashMap<String,String>();
      class_info.global_vars.put(r11.toString(),"main");
      SymTab.put(r1.toString(),class_info);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      class_name = n.f1.f0.toString();
      ClassObj Class_info = new ClassObj();
      if(SymTab.containsKey(n.f1.f0.toString()))
      {
        System.out.println("Type error");
        System.exit(0);
      }
      SymTab.put(n.f1.f0.toString(),Class_info);
      SymTab.get(n.f1.f0.toString()).class_extends = new HashMap<String,ClassExtendsObj>();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      Class_info.global_vars = new HashMap<String,String>();
      /*Class_info.global_vars = (HashMap<String,String>)*/ n.f3.accept(this, (A)Class_info.global_vars);
      Class_info.methods = new HashMap< String, MethodObj>();
      /*Class_info.methods = (HashMap< String, MethodObj> )*/ n.f4.accept(this, (A)Class_info.methods);
      n.f5.accept(this, argu);
      class_name = null;
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      class_extends_name = n.f1.f0.toString();
      class_name = n.f3.f0.toString();
      ClassExtendsObj class_extends_req = new ClassExtendsObj();
      class_extends_req.global_vars = new HashMap<String,String>();
      class_extends_req.methods = new HashMap<String,MethodObj>(); 
      if(SymTab.containsKey(n.f1.f0.toString()) || SymTab.get(n.f3.f0.toString()).class_extends.containsKey(n.f1.f0.toString()))
      {
        System.out.println("Type error");
        System.exit(0);
      }
      SymTab.get(n.f3.f0.toString()).class_extends.put(n.f1.f0.toString(),class_extends_req);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      /*class_extends_req.global_vars = (HashMap<String,String>)*/ n.f5.accept(this, (A)class_extends_req.global_vars);
      /*class_extends_req.methods = (HashMap<String,MethodObj>)*/ n.f6.accept(this, (A)class_extends_req.methods);
      n.f7.accept(this, argu);
      class_extends_name = null;
      class_name = null;
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      R r0 = n.f0.accept(this, argu);
      R r1 = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      HashMap <String,String> variables = new HashMap <String,String>();
      variables = (HashMap <String,String>)argu;
      if(SymTab.get(class_name)==null)
      {
        System.out.println("Type error");
        System.exit(0);
      }
      if(method_name != null)
      {
        if(class_extends_name!=null)
        {
          if(SymTab.get(class_name).class_extends.get(class_extends_name).methods.get(method_name)!=null)
          {
            if(SymTab.get(class_name).class_extends.get(class_extends_name).methods.get(method_name).variables.containsKey(n.f1.f0.toString()))
            {
              System.out.println("Type error");
              System.exit(0);
            }
          }
        }
        else if(SymTab.get(class_name).methods.get(method_name)!=null)
        {
          if(SymTab.get(class_name).methods.get(method_name).variables.containsKey(n.f1.f0.toString()))
          {
            System.out.println("Type error");
            System.exit(0);
          }
        }
      }
      else
      {
        if(SymTab.get(class_name).global_vars != null && SymTab.get(class_name).global_vars.containsKey(n.f1.f0.toString()))
        {
          System.out.println("Type error");
          System.exit(0);
        }
      }
      variables.put(r1.toString(),r0.toString());
      // if(variables!=null)
      // {
      //   for(String name: variables.keySet()){
      //   String key = name;
      //   System.out.println(name);
      //   }
      // }
      // else
      // {
      //   System.out.println("over here");
      //   System.exit(0);
      // }
      _ret = (R)variables;
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;

      if(class_extends_name!=null)
      {
        if(SymTab.get(class_name).class_extends.get(class_extends_name).methods.containsKey(n.f2.f0.toString()))
        {
          System.out.println("Type error");
          System.exit(0);
        }
      }
      else
      {
        if(SymTab.get(class_name).methods.containsKey(n.f2.f0.toString()))
        {
          System.out.println("Type error");
          System.exit(0);
        }
      }

      method_name = n.f2.f0.toString();
      HashMap<String, MethodObj> method = new HashMap<String, MethodObj>();
      method = (HashMap<String, MethodObj>) argu;
      MethodObj method_req = new MethodObj();
      method_req.paramList = new HashMap<String,String>();
      method_req.variables = new HashMap<String,String>();
      HashMap<String,String> param_list = new HashMap<String,String>();
      HashMap<String,String> variables = new HashMap<String,String>();

      n.f0.accept(this, argu);
      R r1 = n.f1.accept(this, argu);
      method_req.returnType = r1.toString();
      R r2 = n.f2.accept(this, argu);
      method_req.paramList = param_list;
      method_req.variables = variables;
      method.put(r2.toString(),method_req);
      n.f3.accept(this, argu);
      n.f4.accept(this, (A)param_list);

      if(class_extends_name!=null)
      {
        if(SymTab.get(class_name).methods != null && SymTab.get(class_name).methods.get(r2.toString())!=null)
        {
          int sz1 = SymTab.get(class_name).methods.get(r2.toString()).paramList.size() ;
          int sz2 = vec.size(); 
          if( sz1 != sz2)
          {
            System.out.println("Type error");
            System.exit(0);
          }
          if(sz1 != 0 && SymTab.get(class_name).methods.containsKey(r2.toString()))
          {
            int i=0;
            for(String iden : SymTab.get(class_name).methods.get(r2.toString()).paramList.keySet())
            {
              String type = SymTab.get(class_name).methods.get(r2.toString()).paramList.get(iden);
              if(type != vec.get(i))
              {
                if(SymTab.containsKey(type) && SymTab.get(type).class_extends!= null && !SymTab.get(type).class_extends.containsKey(vec.get(i)))
                {
                  System.out.println("Type error");
                  System.exit(0);
                }
              } 
              i++;
            }
            if(SymTab.get(class_name).methods.get(r2.toString()).returnType != r1.toString())
            {
              System.out.println("Type error");
                  System.exit(0);
            }
          }
        }
      }

      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, (A)variables);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      R r10 = n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);

      // if(r10 == null)
      // {
      //   System.out.println("madarchod "+r1.toString()+r2.toString());
      //   System.exit(0);
      // }
      // if(r1.toString() != r10.toString())
      // {
      //   System.out.println(r1.toString()+"Type error ww"+r10.toString());
      //   System.exit(0);
      // }

      vec.removeAllElements();
      
      // if(method_req.paramList!=null)
      // {
      //   for(String name: method_req.paramList.keySet()){
      //   String key = name;
      //   String value = method_req.paramList.get(name).toString();
      //   System.out.println(name+" "+value);
      //   }
      // }
      // else
      // {
      //   System.out.println("omg");
      //   System.exit(0);
      // }
      
      _ret = (R) method;
      method_name = null;
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      HashMap<String,String> param_list = new HashMap<String,String>();
      param_list = (HashMap<String,String>) n.f0.accept(this, argu);
      n.f1.accept(this, (A)param_list);
      // if(param_list!=null)
      // {
      //   for(String name: param_list.keySet()){
      //   String key = name;
      //   String value = param_list.get(name).toString();
      //   System.out.println(name+" "+value);
      //   }
      // }
      _ret = (R) param_list;
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      HashMap<String,String> param_list = new HashMap<String,String>();
      R r0 = n.f0.accept(this, argu);
      R r1 = n.f1.accept(this, argu);
      vec.add(r0.toString());
      param_list = (HashMap<String,String>) argu;
//      System.out.println("am in fp"+r1.toString()+" "+r0.toString());
      param_list.put(r1.toString(),r0.toString());
      // if(param_list!=null)
      // {
      //   for(String name: param_list.keySet()){
      //   String key = name;
      //   System.out.println(name);
      //   }
      // R _ret=null;
      // R r0 = n.f0.accept(this, argu);
      // R r1 = n.f1.accept(this, argu);
      // n.f2.accept(this, argu);
      // HashMap <String,String> variables = new HashMap <String,String>();
      // variables = (HashMap <String,String>)argu;
      // variables.put(r1.toString(),r0.toString());
      // // }
      _ret = (R) param_list;
      // if(_ret == null)
      // {
      //   //System.out.println("_ret");
      //   System.exit(0);
      // }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      HashMap<String,String> param_list = new HashMap<String,String>();
      n.f0.accept(this, argu);
      param_list = (HashMap<String,String>) n.f1.accept(this, argu);
      _ret = (R) param_list;
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      String s = "array";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret = (R)s;
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      String s = "bool";
      n.f0.accept(this, argu);
      _ret = (R)s;
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      String s = "int";
      n.f0.accept(this, argu);
      _ret = (R)s;
      //  System.out.println("am in type "+_ret.toString());
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String s = "int";
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String s = "int";
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s = "int";
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s = "bool";
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s = "bool";
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      String s = n.f0.toString();
      n.f0.accept(this, argu);
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s = "this";
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String s = "array";
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s = "bool";
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R r1 = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret = r1;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
