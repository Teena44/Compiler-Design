//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
// class MethodObj{
//       public String returnType;
//       public HashMap< String, String> paramList;
//       public HashMap< String, String> variables;
//    }

// class ClassExtendsObj{
//       public HashMap< String, String> global_vars;
//       public HashMap < String, MethodObj> methods; 
//    } 

// class ClassObj{
//       public HashMap< String, String> global_vars;
//       public HashMap< String, MethodObj> methods;
//       public HashMap< String, ClassExtendsObj> class_extends; 
//    }

public class GJDepthFirst2<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
  // public class MethodObj{
  //     public String returnType;
  //     public HashMap< String, String> paramList;
  //     public HashMap< String, String> variables;
  //  }

  //  public class ClassExtendsObj{
  //     public HashMap< String, String> global_vars;
  //     public HashMap < String, MethodObj> methods; 
  //  } 

  //  public class ClassObj{
  //     public HashMap< String, String> global_vars;
  //     public HashMap< String, MethodObj> methods;
  //     public HashMap< String, ClassExtendsObj> class_extends; 
  //  }

   // public class ClassObj{
   //    public HashMap< String, String> global_vars;
   //    public HashMap< String, MethodObj> methods;
   //    public HashMap< String, ClassExtendsObj> class_extends; 
   // }
   // public HashMap<String, ClassObj> symTab = new HashMap<String, ClassObj>();

   public String class_name;
   public String method_name;
   public String class_extends_name = null;
   public boolean main_class = false;
   public String class_type;
   public boolean var_decl = false;
   public Vector vec = new Vector();

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      HashMap<String, ClassObj> symTab = new HashMap<String, ClassObj>();
      symTab = (HashMap<String, ClassObj>) argu;
      n.f0.accept(this, (A) symTab);
      n.f1.accept(this, (A) symTab);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      main_class = true;
      //ClassObj class_info = new ClassObj();
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      main_class = false;
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      //System.out.println("main is "+main_class);
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret = null;

      class_name = n.f1.f0.toString();
      HashMap<String, ClassObj> symTab = new HashMap<String, ClassObj>();
      symTab = (HashMap<String, ClassObj>) argu;

      if(!symTab.containsKey(n.f1.f0.toString()))
      {
        System.out.println("Symbol not found");
        System.exit(0);
      }
      //ClassObj class_info = new ClassObj();
      //class_info = (ClassObj) symTab.get(n.f1.f0.toString());
      n.f0.accept(this, argu);
      var_decl = true;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      var_decl = false;
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      class_name = null;
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;

      class_extends_name = n.f1.f0.toString();
      class_name = n.f3.f0.toString();
      HashMap<String, ClassObj> symTab = new HashMap<String, ClassObj>();
      symTab = (HashMap<String, ClassObj>) argu;

      if(!symTab.containsKey(n.f3.f0.toString()))
      {
        System.out.println("Symbol not found");
        System.exit(0);
      }
      ClassObj class_info = new ClassObj();
      class_info = symTab.get(n.f3.f0.toString());
      if(!class_info.class_extends.containsKey(n.f1.f0.toString()))
      {
        System.out.println("Symbol not found");
        System.exit(0);
      }
      n.f0.accept(this, argu);
      var_decl = true;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      var_decl = false;
      n.f6.accept(this, argu);//(A) symTab.get(n.f1.f0.toString()));
      n.f7.accept(this, argu);
      class_extends_name = null;
      class_name = null;
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      HashMap<String, ClassObj> symTab = new HashMap<String, ClassObj>();
      symTab = (HashMap<String, ClassObj>) argu;
      method_name = n.f2.f0.toString();
      var_decl = true;
      n.f0.accept(this, argu);
      R r1 = n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      var_decl = false;
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      R r10 = n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);

      if(symTab.get(class_name).methods.get(method_name).returnType != r10.toString())
      {
        System.out.println("Type error");
        System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(r0.toString() != r2.toString())
      {
        System.out.println("Type error");
        //System.out.println(r0.toString()+" "+r2.toString());
        System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      R r0 = n.f0.accept(this, argu);
      if(r0.toString() != "array")
      {
        System.out.println("Type error");
        //System.out.println(r0.toString());
        System.exit(0);
      }
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      R r5 = n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(r2.toString()!="int" || r5.toString()!="int")
      {
        System.out.println("Type error");
        //System.out.println(r2.toString());
        System.exit(0); 
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      if(r2.toString() != "bool")
      {
        System.out.println("Type error");
        //System.out.println(r2.toString());
        System.exit(0);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;

      //System.out.println(method_name+" method"); 
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      // if(r2==null)
      // {
      //   System.out.println("r2 is null");
      //   System.exit(0);
      // }
      if(r2.toString() != "bool")
      {
        System.out.println("Type error");
        //System.out.println(r2.toString());
        System.exit(0);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      if(r2.toString() != "bool")
      {
        System.out.println("Type error");
        //System.out.println(r2.toString());
        System.exit(0);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      //System.out.println("print");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      if(r0.toString() != "bool" || r2.toString() != "bool")
      {
        System.out.println("Type error");
        //System.out.println(r2.toString());
        System.exit(0);
      }
      String s = "bool"; 
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      if(r0.toString() != "bool" || r2.toString() != "bool")
      {
        System.out.println("Type error");
        //System.out.println(r2.toString());
        System.exit(0);
      }
      String s = "bool"; 
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      if(r0.toString() != "int" || r2.toString() != "int")
      {
        System.out.println("Type error");
        //System.out.println(r2.toString());
        System.exit(0);
      }
      String s = "bool"; 
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      if(r0.toString() !=  r2.toString())
      {
        System.out.println("Type error");
        //System.out.println(r2.toString());
        System.exit(0);
      }
      String s = "bool"; 
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      if(r0.toString() != "int" || r2.toString() != "int")
      {
        System.out.println("Type error");
        //System.out.println(r2.toString());
        System.exit(0);
      }
      String s = "int"; 
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      if(r0.toString() != "int" || r2.toString() != "int")
      {
        System.out.println("Type error");
        //System.out.println(r2.toString());
        System.exit(0);
      }
      String s = "int"; 
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      // if(r2==null)
      // {
      //   System.out.println("r2 is null");
      //   System.exit(0);
      // }
      if(r0.toString() != "int" || r2.toString() != "int")
      {
        System.out.println("Type error");
        //System.out.println(r2.toString());
        System.exit(0);
      }
      String s = "int"; 
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      if(r0.toString() != "int" || r2.toString() != "int")
      {
        System.out.println("Type error");
        //System.out.println(r2.toString());
        System.exit(0);
      }
      String s = "int"; 
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R r2 = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(r2.toString() != "int"||r0.toString() != "array")
      {
        System.out.println("Type error");
        //System.out.println(r2.toString());
        System.exit(0);
      }
      String s = "int"; 
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      R r0 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(r0.toString() != "array")
      {
        System.out.println("Type error");
        //System.out.println(r0.toString());
        System.exit(0);
      }
      String s = "int"; 
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      String back_up;
      R r0 = n.f0.accept(this, argu);
      if(r0.toString() == "this")   
        class_type = class_name;
      else
        class_type = r0.toString();

      back_up = class_type;
      n.f1.accept(this, argu);
      _ret = (R) n.f2.accept(this, argu);
      class_type = back_up;      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);

      class_type = back_up;
      HashMap<String, ClassObj> symTab = new HashMap<String, ClassObj>();
      symTab = (HashMap<String, ClassObj>) argu;
      if(symTab.get(class_type).methods != null && symTab.get(class_type).methods.get(n.f2.f0.toString())!=null)
      {
        int sz1 = symTab.get(class_type).methods.get(n.f2.f0.toString()).paramList.size() ;
        int sz2 = vec.size(); 
        if( sz1 != sz2)
        {
          System.out.println("Type error");
          System.exit(0);
        }
        int i=0;
        for(String iden : symTab.get(class_type).methods.get(n.f2.f0.toString()).paramList.keySet())
        {
          String type = symTab.get(class_type).methods.get(n.f2.f0.toString()).paramList.get(iden);
          if(type != vec.get(i))
          {
            if(symTab.containsKey(type) && symTab.get(type).class_extends!= null && !symTab.get(type).class_extends.containsKey(vec.get(i)))
            {
              System.out.println("Type error");
              System.exit(0);
            }
          } 
          i++;
        }
      }
      class_type = null;
      vec.removeAllElements();
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      vec.add(_ret.toString());
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      vec.add(_ret.toString());
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s = "int";
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s = "bool";
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s = "bool";
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(var_decl == true)
        return _ret;
      if(main_class == true)
      {
        HashMap<String,ClassObj> symTab = new HashMap<String, ClassObj>();
        symTab = (HashMap<String, ClassObj>) argu;
        if(symTab.containsKey(n.f0.toString())){
          _ret = (R) n.f0.toString();
          return _ret;
        }
        for(String name : symTab.keySet())
        {
          if(symTab.get(name).global_vars!=null && symTab.get(name).global_vars.containsKey(n.f0.toString()))
            return _ret;
          if(symTab.get(name).methods != null && symTab.get(name).methods.containsKey(n.f0.toString()))
          {
            _ret = (R) symTab.get(name).methods.get(n.f0.toString()).returnType; 
            return _ret;
          }
          if(symTab.get(name).class_extends != null)
          {
            for(String classex : symTab.get(name).class_extends.keySet())
            {
              if(symTab.get(name).class_extends.get(classex).methods != null && symTab.get(name).class_extends.get(classex).methods.containsKey(n.f0.toString()))
              {
                _ret = (R) symTab.get(name).class_extends.get(classex).methods.get(n.f0.toString()).returnType; 
                return _ret;
              }
              
            }
          }
        }
        System.out.println("Symbol not found");//+n.f0.toString());
        System.exit(0);
        return _ret;
      }
      else
      {
        HashMap<String,ClassObj> symTab = new HashMap<String, ClassObj>();
        symTab = (HashMap<String, ClassObj>) argu;
        ClassObj class_info = new ClassObj();
        class_info = (ClassObj) symTab.get(class_name);
        //search in method vardeclaration
        MethodObj method = new MethodObj();

        if(class_extends_name!=null)
        {
            if(class_info.class_extends != null && class_info.class_extends.get(class_extends_name) != null)
            {
              method = class_info.class_extends.get(class_extends_name).methods.get(method_name);
              //search in the method of class_extends
              if(method != null && method.variables.containsKey(n.f0.toString()))
              {
                _ret = (R) method.variables.get(n.f0.toString());
                return _ret;
              }
              //search in the parameter list of class_extends_methdd
              if(method != null && method.paramList.containsKey(n.f0.toString()))
              {
                _ret = (R) method.paramList.get(n.f0.toString());
                return _ret;
              }
              //search method names in class_extends
              if(class_info.class_extends.get(class_extends_name).methods.containsKey(n.f0.toString()))
              {
                _ret = (R) class_info.class_extends.get(class_extends_name).methods.get(n.f0.toString()).returnType;
                return _ret;
              }
              //search in the global_vars of class_extends
              if(symTab.get(class_name).class_extends.get(class_extends_name).global_vars.containsKey(n.f0.toString()))
              {
                _ret = (R) symTab.get(class_name).class_extends.get(class_extends_name).global_vars.get(n.f0.toString());
                return _ret;
              }
            }


            //search in the global variables of class type
            if(class_type != null && symTab.get(class_type).global_vars.containsKey(n.f0.toString()))
            {
              _ret = (R) symTab.get(class_type).global_vars.get(n.f0.toString());
              return _ret;
            }
            //search method names in the class type
            if(class_type != null && symTab.get(class_type).methods.containsKey(n.f0.toString()))
            {
              _ret = (R) symTab.get(class_type).methods.get(n.f0.toString()).returnType;
              return _ret;
            }


            //search in the global variables of class
            if(symTab.get(class_name).global_vars.containsKey(n.f0.toString()))
            {
              _ret = (R) symTab.get(class_name).global_vars.get(n.f0.toString());
              return _ret;
            }
            //search method names in the class
            if(class_info.methods.containsKey(n.f0.toString()))
            {
              _ret = (R) class_info.methods.get(n.f0.toString()).returnType;
              return _ret;
            }
            System.out.println("Symbol not found");
            System.exit(0);
        }
        method = class_info.methods.get(method_name);

        if(method != null && method.variables.containsKey(n.f0.toString()))
        {
          _ret = (R) method.variables.get(n.f0.toString());
          return _ret;
        }
        //search in method parameter list
        if(method != null && method.paramList.containsKey(n.f0.toString()))
        {
          _ret = (R) method.paramList.get(n.f0.toString());
          return _ret;
        }
        //search in global variables
        if(symTab.get(class_name).global_vars.containsKey(n.f0.toString()))
        {
          _ret = (R) symTab.get(class_name).global_vars.get(n.f0.toString());
          return _ret;
        }
        //search method names in the class
        if(class_info.methods.containsKey(n.f0.toString()))
        {
          _ret = (R) class_info.methods.get(n.f0.toString()).returnType;
          return _ret;
        }
        //if the object is of type extended class
        for(String name : symTab.keySet())
        {
          if(symTab.get(name).class_extends!=null && symTab.get(name).class_extends.containsKey(n.f0.toString()))
          {
            //System.out.println(name);
            _ret = (R) n.f0.toString();
            return _ret;
          }
        }

        if(symTab.containsKey(n.f0.toString())){
          _ret = (R) n.f0.toString();
          return _ret;
        }
        if(class_type != null && symTab.containsKey(class_type)){
          if(symTab.get(class_type).methods.containsKey(n.f0.toString())){
            _ret = (R) symTab.get(class_type).methods.get(n.f0.toString()).returnType;
            return _ret;
          }
        }
        System.out.println("Symbol not found");//+n.f0.toString());
        System.exit(0);
        
        return _ret;
    }
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      // if(_ret == null)
      // {
      //   System.out.println("_ret is null");
      //   System.exit(0);
      // }
      _ret = (R) class_name;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      R r3 = n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(r3.toString() != "int")
      {
        System.out.println("Type error");
        //System.out.println(r3.toString());
        System.exit(0);
      }
      String s = "array"; 
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R r1 = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String s = r1.toString();
      //System.out.println(s);
      _ret = (R) s;
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      if(_ret.toString() != "bool")
      {
        System.out.println("Type error");
        //System.out.println(_ret.toString());
        System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
